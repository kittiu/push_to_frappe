<?xml version="1.0" encoding="utf-8"?>
<odoo noupdate="1">
    <record id="action_push_sales_order_to_frappe" model="ir.actions.server">
        <field name="name">Send SO to Frappe Server</field>
        <field name="model_id" ref="sale.model_sale_order"/>
        <field name="binding_model_id" ref="sale.model_sale_order"/>
        <field name="state">code</field>
        <field name="code">
target_doctype = 'Sales Order'

# Create term and conditions
notes = {}
for doc in records:
    note = '\n'.join(doc.order_line.filtered("display_type").mapped("name"))
    notes.update({doc.id: note})

target_docs = [{
    'odoo_ref': '%s|%s|%s' % (doc._name, doc.id, doc.name),  # Required
    'customer': doc.partner_id.name,
    'transaction_date': doc.date_order.strftime('%Y-%m-%d'),
    'delivery_date': doc.date_order.strftime('%Y-%m-%d'),
    'payment_terms_template': doc.payment_term_id.name,
    'items': [
        {
            'item_code': l.product_id.name,
            'description': l.name,
            'qty': l.product_uom_qty,
            'rate': l.price_unit
        } for l in doc.order_line.filtered(lambda l: not l.display_type)
    ],
    'taxes_and_charges': doc.order_line.tax_id and doc.order_line.tax_id.name or '',
    'terms': notes[doc.id]+doc.note and (notes[doc.id]+doc.note).replace('\n', '&lt;br&gt;') or '',
} for doc in records]

action = env['push.to.frappe'].push(target_doctype, target_docs, push_file=False)
        </field>
    </record>

    <record id="action_push_cust_invoice_to_frappe" model="ir.actions.server">
        <field name="name">Send Cust Invoice to Frappe Server</field>
        <field name="model_id" ref="account.model_account_move"/>
        <field name="binding_model_id" ref="account.model_account_move"/>
        <field name="state">code</field>
        <field name="code">
target_doctype = 'Sales Invoice'

# Create term and conditions
notes = {}
for doc in records:
    note = '\n'.join(doc.invoice_line_ids.filtered("display_type").mapped("name"))
    notes.update({doc.id: note})

target_docs = [{
    'odoo_ref': '%s|%s|%s' % (doc._name, doc.id, doc.name),  # Required
    'customer': doc.partner_id.name,
    'debit_to': doc.partner_id.property_account_receivable_id.display_name,
    'posting_date': doc.invoice_date.strftime('%Y-%m-%d'),
    'set_posting_time': 1,
    'posting_time': "01:00:00",
    'payment_terms_template': doc.invoice_payment_term_id.name,
    'tax_id': doc.partner_id.vat,
    'items': [
    {
        'item_code': l.product_id.name,
        'description': l.name,
        'qty': l.quantity,
        'uom': l.product_uom_id.name,
        'rate': l.price_unit,
        'income_account': l.account_id.display_name,
        'cost_center': l.analytic_account_id.name,
        'sales_order': l.sale_line_ids.order_id.name,
    } for l in doc.invoice_line_ids.filtered(lambda l: not l.display_type)
    ],
    'taxes_and_charges': doc.invoice_line_ids.tax_ids and doc.invoice_line_ids.tax_ids.name or '',
    'terms': notes[doc.id]+doc.narration and (notes[doc.id]+doc.narration).replace('\n', '&lt;br&gt;') or '',
} for doc in records]

action = env['push.to.frappe'].push(target_doctype, target_docs, push_file=True)
        </field>
    </record>

    <record id="action_push_supplier_addr_contact_to_frappe" model="ir.actions.server">
        <field name="name">Send Supplier-Address-Contact to Frappe</field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="binding_model_id" ref="base.model_res_partner"/>
        <field name="state">code</field>
        <field name="code">
# Supplier
suppliers = [{
  'odoo_ref': '%s|%s|%s' % (doc._name, doc.id, doc.name),  # Required
  'name': doc.name,
  'supplier_name': doc.name,
  'supplier_type': 'Company',
  'supplier_group': 'All Supplier Groups',
  'territory': 'Thailand',
  'tax_id': doc.vat,
  'branch_cde': doc.branch,
  'website': doc.website
} for doc in records]

# Address
addresses = [{
  'odoo_ref': '%s|%s|%s' % (doc._name, doc.id, doc.name),  # Required
  'address_title': doc.name,
  'address_line1': doc.street or '-',
  'address_line2': doc.street2,
  'city': doc.city or '-',
  'country': 'Thailand',
  'pincode': doc.zip,
  'email_address': doc.email,
  'links': [{
    'link_doctype': 'Supplier',
    'link_name': doc.name
  }]
} for doc in records]

# Contact
contacts = [{
  'odoo_ref': '%s|%s|%s' % (contact._name, contact.id, contact.name),  # Required
  'first_name': contact.name,
  'company_name': contact.parent_id.name,
  'designation': contact.function,
  'email_ids': contact.email and [{
    'email_id': contact.email
  }] or [],
  'phone_nos': (contact.phone or contact.mobile) and [{
    'phone': ','.join(filter(lambda x: x, [contact.phone, contact.mobile]))
  }] or [],
  'links': [{
    'link_doctype': 'Supplier',
    'link_name': contact.parent_id.name
  }]
} for contact in records.mapped("child_ids")]

res = env['push.to.frappe'].push('Supplier', suppliers, push_file=False, log_ids=[])
res = env['push.to.frappe'].push('Address', addresses, push_file=False, log_ids=res['log_ids'])
action = env['push.to.frappe'].push('Contact', contacts, push_file=False, log_ids=res['log_ids'])
        </field>
    </record>

    <record id="action_push_cust_addr_contact_to_frappe" model="ir.actions.server">
        <field name="name">Send Customer-Address-Contact to Frappe</field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="binding_model_id" ref="base.model_res_partner"/>
        <field name="state">code</field>
        <field name="code">
# Customer
customers = [{
    'odoo_ref': '%s|%s|%s' % (doc._name, doc.id, doc.name),  # Required
    'name': doc.name,
    'customer_name': doc.name,
    'customer_type': 'Company',
    'customer_group': 'Commercial',
    'territory': 'Thailand',
    'tax_id': doc.vat,
    'branch_cde': doc.branch,
    'website': doc.website
} for doc in records]

# Address
addresses = [{
    'odoo_ref': '%s|%s|%s' % (doc._name, doc.id, doc.name),  # Required
    'address_title': doc.name,
    'address_line1': doc.street,
    'address_line2': doc.street2,
    'city': doc.city,
    'country': 'Thailand',
    'pincode': doc.zip,
    'email_address': doc.email,
    'links': [{
    'link_doctype': 'Customer',
    'link_name': doc.name
    }]
} for doc in records]

# Contact
contacts = [{
    'odoo_ref': '%s|%s|%s' % (contact._name, contact.id, contact.name),  # Required
    'first_name': contact.name,
    'company_name': contact.parent_id.name,
    'designation': contact.function,
    'email_ids': contact.email and [{
    'email_id': contact.email
    }] or [],
    'phone_nos': (contact.phone or contact.mobile) and [{
    'phone': ','.join(filter(lambda x: x, [contact.phone, contact.mobile]))
    }] or [],
    'links': [{
    'link_doctype': 'Customer',
    'link_name': contact.parent_id.name
    }]
} for contact in records.mapped("child_ids")]

res = env['push.to.frappe'].push('Customer', customers, push_file=False, log_ids=[])
res = env['push.to.frappe'].push('Address', addresses, push_file=False, log_ids=res["log_ids"])
action = env['push.to.frappe'].push('Contact', contacts, push_file=False, log_ids=res["log_ids"])
        </field>
    </record>
</odoo>
